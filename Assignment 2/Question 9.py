# Prompt: Find a Longest Common Subsequence of Two Strings
# Given: Two strings.
# Return: A longest common subsequence of these strings.
import numpy as np
import sys

def BacktrackLCS(str1, str2):
	global Backtrack

	LCS_Matrix = np.zeros([len(str1)+1, len(str2)+1], dtype = int)
	for i in range(0, len(str1)+1):
		LCS_Matrix[i][0] = 0
		Backtrack[i][0] = 0
	for j in range(0, len(str2)+1):
		LCS_Matrix[0][j] = 0
		Backtrack[0][j] = 0

	for i in range(1, len(str1)+1):
		for j in range(1, len(str2)+1):
			LCS_Matrix[i][j] = max(LCS_Matrix[i-1][j], LCS_Matrix[i][j-1], LCS_Matrix[i-1][j-1] + (1 if str1[i-1] == str2[j-1] else 0))
			if LCS_Matrix[i][j] == LCS_Matrix[i-1][j]:
				Backtrack[i][j] = 1
			elif LCS_Matrix[i][j] == LCS_Matrix[i][j-1]:
				Backtrack[i][j] = 2
			elif LCS_Matrix[i][j] == LCS_Matrix[i-1][j-1] + 1:
				Backtrack[i][j] = 3
	return Backtrack

def Output(bt, str1, i, j):
	global outputstr

	if i == 0 or j == 0:
		return ""
	if Backtrack[i][j] == 1:
		Output(bt, str1, i-1, j)
	elif Backtrack[i][j] == 2:
		Output(bt, str1, i, j-1)
	elif Backtrack[i][j] == 3:
		outputstr = Output(bt, str1, i-1, j-1) + str1[i-1]
	return outputstr

def main():
	global Backtrack
	global outputstr
	sys.setrecursionlimit(10000)

	s1 = "CGAAATCGGGACGCTGGTCTCGCATGCGGAAAGTGCAATGGCCTGGGTAAATCTGTCCTAAGACCATATACACGACGGTAGAAGGTGACCGATATTCGTACTTCAATAGAATCACCATCGCACTCGTTTCTCCGTCTTTGTCGCGGCACTAAGCGGACGCAATCGTTTCAACTTAAGCGTATTGACACCGTAACGTTGTTATACCCGTGTCCAACCTGGGGCTCGGCCACTGGTTAACTTAATAATGGCTGCTTGACCACGCTAAGGCGGCGAGTGAGTGGTCTAAGGAACCGATCGTAGGAAAAGCAATTGGGGTTTATGTCAAACACATAATCAGCTGCGGACAAAGTTTATTAACGCCTTACAACGCTGTGTTAGGTTACGCCTCGTAGGATCCGTCACTTTAGGGTCAGCCAGGTCAATCTGGATTCATATGCCCGGGACCGATCTCTTAGACGGCAGCTCACAGGTCTAGGAGCATCCGGTACTCCCTGTATTCGTACTATGGTCCATCATAGCCGGGTGGTTCGCTCAGTTAAAACCCGGAGGTGACATTTGGCCAGGAAAAGGGTCGAACTAATTTAGTGTGTCCAGCAAGGGGATGCGTTAGGCCTGCCAATGTTTGTCCTCGCACACGGACCCTAACGTTGTAGACCGTCGGTCAGGTCATGATGCTGCCCTGTCCGCAGAGGAGTTGGTGCGGCAATGAACGTACCACGGATGTGTGTCGAACTAATCGGTCCAGGCTTTCTAGCCTGCGGACTTACTGAAAACTACTTACATGTGAGACTCGTCCCCGG"
	s2 = "CCGGGCTCACGTTTTACTGAAATAGCTTACAATGGCGGATTGCCGTGGTTCGTCAATGGTAGCCGCCGCAGAGTCTTTTTTATAGCTTAGTAACGGGAGATTAGTATTCGGATTATACAACCCACGGAATCAAGTGGTACAGGGGGGCCAGAGCTCTTCTTTCAATTTCTCCTTTGCGGTTGGAGGGGAATGTGTTCTGATACGGCGTAGTCCGGGCATCGTGGTTCCGAATGCTCCCCGGATGAAGATCGTCATGAAAGAGACCTCGACCTTCCCACACAAAAATCGTCTCGTGGAGACATTAGTAAACCTTGGGATTGCCTCTGTACTTTGCCCTTGGGGACATTTGATCACCTAGGAGCTCTAAAAGCGGCATCATGAAAGATAGGGGATCGTTGACCGGGTAGCGGCGAGCTCACTCACGGGTTACTCTCGGCACCTGCGAGACTGTCAGTATCTGACAGAGAACCTCATCGCTATATTCGGACGTGCTAATATGCACGGGCCGGTGTCTCACCCTTAGCGCCGGAGAGAGTGATCATAGAATTTTGGTGTGCCGAATAGTATATTACGAGATCCGACTAAACCTTATAGCGTATTGGATAAAGTCAGAACCGTTCGAGACAGACCTAGCCCTGCCCCCATTGTGTGGACCAGGCTTTTGTCGTGTCTATCCGCTCCGTTTGCGCGCTTGCCGTCTTACTTTGCGTGCTTCTTCCCGAGGGTGATAGCCCAAATTTTCCCACGCTGGGCCATCCGTTTGGTGTCCGCTTATGCTAGTTCCCTCCACTCGTTGAATGAGGGCAGCTAGAGGAAATGTAGCGTGCTGTTTCTATAGGGCACTGCGTTGGGTAGCTGAGCCACGGCGAACTCACCCCA"
	Backtrack = np.zeros([len(s1)+1, len(s2)+1], dtype = int) # 1 for down; 2 for right; 3 for diagonal
	BacktrackLCS(s1, s2)
	outputstr = ""
	outputstr = Output(Backtrack, s1, len(s1), len(s2))
	print(outputstr)
	

if __name__ == "__main__":
  main()